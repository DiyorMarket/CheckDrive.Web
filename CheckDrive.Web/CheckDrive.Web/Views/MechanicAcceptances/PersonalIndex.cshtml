@model IEnumerable<CheckDrive.ApiContracts.MechanicAcceptance.MechanicAcceptanceDto>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- jQuery -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">

@{
    ViewData["Title"] = "Mechanic Acceptances (Personal)";
    Layout = "~/Views/Shared/_PersonalLayout.cshtml";
    string activeTab = "MechanicAcceptances";
}
<form method="get" action="@Url.Action("PersonalIndex")">
    <div class="container mt-5">    
        <div class="row justify-content-between align-items-center mb-4">
            <!-- Search -->
            <div class="col-md-4">
                <div class="input-group">
                    <input type="text" class="form-control rounded-left" placeholder="Haydovchini kiriting ..." name="searchString" value="@ViewBag.SearchString">
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">
                            <i class="fa fa-search"></i> Qidirish
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-8 d-flex justify-content-end align-items-center">
                <button id="openCreteMechanicAcceptancesModal" 
                        class="btn btn-success"
                        type="button">
                    <i class="fa fa-plus"></i> Yaratish
                </button>
                <div class="dropdown d-inline-block me-2">
                    <button class="btn btn-outline-info dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa-solid fa-download"></i> Yuklab olish
                    </button>
                    <div class="dropdown-menu p-3" id="dropdownMenu" aria-labelledby="dropdownMenuButton" data-bs-auto-close="outside">
                        <ejs-calendar id="calendar" change="valueChange" Start="Year" Depth="Year"></ejs-calendar>
                        <a class="dropdown-item mt-2 btn btn-info" href="#" id="downloadButton">Yuklash</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered table-striped table-hover paper-shadow">
                <thead>
                    <tr>
                        <th scope="col" style="width: 10%">Haydovchi F.I</th>
                        <th scope="col" style="width: 15%">Mashina</th>
                        <th scope="col" style="width: 10%">Sana</th>
                        <th scope="col" style="width: 10%">Holati</th>

                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-center vertical-align-middle">
                                    @if (item.Status == CheckDrive.ApiContracts.StatusForDto.Unassigned)
                                    {
                                        <a href="/MechanicAcceptances/CreateByLink?driverId=@item.DriverId&carId=@item.CarId&carName=@item.CarName&driverName=@item.DriverName&remainingFuel=@item.RemainingFuel">@item.DriverName</a>
                                    
                                    }
                                    else
                                    {
                                            @item.DriverName
                                    }
                                </td>
                                <td>@item.CarName</td>
                                <td>@item.Date?.ToString("dd/MM/yyyy")</td>
                                <td class="text-center">
                                    @if (item.Status == CheckDrive.ApiContracts.StatusForDto.Pending)
                                    {
                                        <span class="badge bg-pending ">Kutilmoqda</span>
                                    }
                                    else if (item.Status == CheckDrive.ApiContracts.StatusForDto.Unassigned)
                                    {
                                        <span class="badge bg-unassigned ">Tayinlanmagan</span>
                                    }
                                    else if (item.Status == CheckDrive.ApiContracts.StatusForDto.Completed)
                                    {
                                        <span class="badge bg-success ">Yakunlangan</span>
                                    }
                                    else if (item.Status == CheckDrive.ApiContracts.StatusForDto.RejectedByDriver)
                                    {
                                        <span class="badge bg-danger ">Haydovchi tomonidan rad etilgan</span>
                                    }
                                    else if (item.Status == CheckDrive.ApiContracts.StatusForDto.Rejected)
                                    {
                                        <span class="badge bg-danger ">Rad etilgan</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-empty ">No`malum holat</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center">
                                Maʼlumotlar mavjud emas
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="d-flex justify-content-between align-items-center my-2">
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        @if (ViewBag.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("PersonalIndex", new { pageNumber = 1 })" aria-label="First">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("PersonalIndex", new { pageNumber = ViewBag.CurrentPage - 1 })">@(@ViewBag.CurrentPage - 1)</a>
                            </li>
                        }
                        @if (ViewBag.HasNextPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@ViewBag.CurrentPage</span>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("PersonalIndex", new { pageNumber = ViewBag.CurrentPage + 1 })">@(@ViewBag.CurrentPage + 1)</a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("PersonalIndex", new { pageNumber = ViewBag.PageCount })" aria-label="Last">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
                <div class="p-2">
                    <p class="h6 mb-0">@ViewBag.PageCount sahifadan @ViewBag.CurrentPage tasi  ( umumiy ishchilar soni: @ViewBag.TotalCount)</p>
                </div>
            </div>
        </div>
    </div>
</form>
<!-- Modal oyna -->
<div class="modal fade" id="createMechanicAcceptancesReviewModal" tabindex="-1" aria-labelledby="createReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg ">
        <div class="modal-content">
            <div class="modal-header d-flex justify-content-center">
                <h5 id="createMechanicAcceptancesReviewModalLabel">Ro'yxatga olish</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"></span>
                </button>
            </div>
            <div class="modal-body" id="modalContent">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#openCreteMechanicAcceptancesModal').on('click', function () {
                $('#modalContent').empty();
                $.ajax({
                    url: '/mechanicacceptances/createbybutton',
                    type: 'GET',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        $('#modalContent').html(data);
                        $('#createMechanicAcceptancesReviewModal').modal('show');
                        var checkbox = document.getElementById('flexSwitchCheckDefault');
                        var distanceGroup = document.getElementById('distanceGroup');
                        var driverSelect = document.getElementById('driverSelect');
                        var carSelect = document.getElementById('carSelect');
                        var distanceInput = document.getElementById('distanceInput');
                        var submitButton = document.getElementById('submitButton');  // Correct button ID
                        var carIdInput = document.getElementById('carIdInput');
                        var remainingFuelInput = document.getElementById('remainingFuelInput');
                        var mileage = 0;

                        function toggleDistanceInput() {
                            if (checkbox.checked) {
                                distanceGroup.style.display = "block";
                            } else {
                                distanceGroup.style.display = "none";
                            }
                        }

                        checkbox.addEventListener('change', toggleDistanceInput);
                        toggleDistanceInput();  // Initial check

                        driverSelect.addEventListener('change', function () {
                            var selectedOption = driverSelect.options[driverSelect.selectedIndex];
                            var carId = selectedOption.getAttribute('data-carid');
                            var carName = selectedOption.getAttribute('data-carname');
                            mileage = parseInt(selectedOption.getAttribute('data-mileage')) || 0;

                            if (carId) {
                                fetch(`/MechanicAcceptances/GetCarDetails?carId=${carId}`)
                                    .then(response => response.json())
                                    .then(data => {
                                        carIdInput.value = carId;
                                        carSelect.innerHTML = `<option value="${carId}">${carName}</option>`;
                                        distanceInput.value = mileage;
                                        remainingFuelInput.value = data.remainingFuel;
                                        validateDistance();
                                    })
                                    .catch(error => console.error('Error fetching car details:', error));
                            } else {
                                carSelect.innerHTML = '<option value="">Avtomobil tanlang</option>';
                                distanceInput.value = '';
                                remainingFuelInput.value = '';
                            }
                        });

                        distanceInput.addEventListener('input', function () {
                            validateDistance();
                        });

                        function validateDistance() {
                            var distance = Number(distanceInput.value);
                            if (distance < mileage) {
                                distanceInput.classList.add('is-invalid');
                                showValidationMessage(`Qabul qilish masofasi avtomobilning oxirgi kiritilgan masofasidan ${mileage} km kam bo'lishi mumkin emas!`);
                                submitButton.disabled = true;  // Disable the correct button
                            } else {
                                distanceInput.classList.remove('is-invalid');
                                clearValidationMessage();
                                submitButton.disabled = false;  // Enable the correct button
                            }
                        }

                        function showValidationMessage(message) {
                            var errorSpan = document.querySelector('.distance-validation-message');
                            if (!errorSpan) {
                                errorSpan = document.createElement('span');
                                errorSpan.className = 'distance-validation-message text-danger';
                                distanceInput.parentNode.appendChild(errorSpan);
                            }
                            errorSpan.textContent = message;
                        }

                        function clearValidationMessage() {
                            var errorSpan = document.querySelector('.distance-validation-message');
                            if (errorSpan) {
                                errorSpan.textContent = '';
                            }
                        }
                    },
                    error: function () {
                        alert("Ro'yhatga olish formani yuklashda xatolik yuz berdi.");
                    }
                });
            });
        });
        $('#createMechanicAcceptancesReviewModal').on('hidden.bs.modal', function () {
            $(this).find('#modalContent').empty(); // Modal yopilganda ichki kontentni tozalash
        });
    </script>
}

<style>
    .modal-content {
        width: 550px;
    }
    .nav-tabs .nav-link.active {
        background-color: #007bff;
        color: white;
    }

    .nav-tabs .nav-link {
        border: 1px solid #dee2e6;
    }

    .badge {
        font-size: 0.8rem;
        padding: 5px 10px;
        border-radius: 5px;
    }

    .bg-pending {
        background-color: orange;
    }

    .bg-unassigned {
        background-color: slategray;
    }

    .bg-success {
        background-color: #28a745;
    }

    .bg-danger {
        background-color: #dc3545;
    }

    .bg-secondary {
        background-color: #6c757d;
    }

    .container {
        margin-top: 30px;
    }

    .table-bordered {
        border: 1px solid #dee2e6;
    }

        .table-bordered th,
        .table-bordered td {
            border: 1px solid #dee2e6;
        }

    .paper-shadow {
        background: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .pagination {
        justify-content: flex-end;
    }

    .shadow {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .pagination .page-link {
        margin-left: 5px;
    }

    .pagination .page-item.shadow {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
    // Default selected year and month
    let selectedYear = new Date().getFullYear(); // Current year
    let selectedMonth = new Date().getMonth() + 1; // Current month (months are zero-based)

    // Function to handle the change event in the calendar
    function valueChange(args) {
        var selectedDate = args.value;
        selectedYear = selectedDate.getFullYear();
        selectedMonth = selectedDate.getMonth() + 1; // Months are zero-based

        // Optionally, update a label to display the selected date (if you have one)
        document.getElementById('date_label').textContent = 'Выбранное значение: ' + selectedDate.toDateString();
    }

    // Prevent the dropdown from closing when clicking inside
    document.getElementById('dropdownMenu').addEventListener('click', function (event) {
        event.stopPropagation(); // Stops the dropdown from closing when interacting with its contents
    });

    // Handle the download button click
    document.getElementById('downloadButton').addEventListener('click', function (e) {
        e.preventDefault(); // Prevent the default action of the link

        // Construct the download URL using the selected year and month
        const url = `/MechanicAcceptances/Download?year=${selectedYear}&month=${selectedMonth}`;

        // Create a temporary link to trigger the download
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', ''); // Add download attribute to force download
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link); // Clean up

        // Manually close the dropdown after downloading
        const dropdown = bootstrap.Dropdown.getInstance(document.getElementById('dropdownMenuButton'));
        dropdown.hide();
    });
</script>
